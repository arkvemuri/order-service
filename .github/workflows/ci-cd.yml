name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  SONAR_PROJECT_KEY: 'order-listing'
  DOCKER_IMAGE: 'arkvemuri/order-service'


jobs:
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    services:
      eureka:
        image: arkvemuri/eureka-server:0.0.2
        ports:
          - 8761:8761
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests and generate coverage
      run: mvn clean verify

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/

    - name: Code Coverage Report
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.java.coveragePlugin=jacoco

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.run_number }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  update-gitops:
    name: Update GitOps Repository
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout GitOps repository
      uses: actions/checkout@v4
      with:
        repository: arkvemuri/deployment-folder
        token: ${{ secrets.GITOPS_TOKEN }}
        path: deployment-folder

    - name: Update image tag in manifest
      run: |
        cd deployment-folder
        IMAGE_TAG="${{ env.DOCKER_IMAGE }}:${{ github.run_number }}"
        sed -i "s|image:.*|image: ${IMAGE_TAG}|g" aws/order-manifest.yml
        
        # Verify the change
        echo "Updated manifest:"
        cat aws/order-manifest.yml

    - name: Commit and push changes
      run: |
        cd deployment-folder
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add aws/order-manifest.yml
          git commit -m "Update order-service image tag to ${{ github.run_number }}"
          git push
          echo "Successfully updated GitOps repository"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:${{ github.run_number }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, update-gitops]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} to staging"
        # Add your staging deployment logic here
        # This could be kubectl commands, helm deployments, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} to production"
        # Add your production deployment logic here
        # This could be kubectl commands, helm deployments, etc.

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}"
        # Add notification logic (Slack, Teams, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Pipeline failed!"
        # Add failure notification logic