name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  SONAR_PROJECT_KEY: 'order-listing'
  DOCKER_IMAGE: 'arkvemuri/order-service'

jobs:
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    services:
      eureka:
        image: arkvemuri/eureka-server:0.0.2
        ports:
          - 8761:8761
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests and generate coverage
      run: mvn clean test jacoco:report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/

    - name: Code Coverage Report
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        # Check if SonarQube secrets are configured
        if [ -z "$SONAR_TOKEN" ] || [ -z "$SONAR_HOST_URL" ]; then
          echo "‚ö†Ô∏è  SonarQube secrets not configured. Skipping SonarQube analysis."
          echo "To enable SonarQube analysis, set the following repository secrets:"
          echo "- SONAR_TOKEN: Your SonarQube authentication token"
          echo "- SONAR_HOST_URL: Your SonarQube server URL (e.g., https://sonarcloud.io)"
          exit 0
        fi
        
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.token=$SONAR_TOKEN \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} .
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
        docker push ${{ env.DOCKER_IMAGE }}:latest

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  update-gitops:
    name: Update GitOps Repository
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Check GitOps Token and Update Repository
      env:
        GITOPS_TOKEN: ${{ secrets.GITOPS_TOKEN }}
      run: |
        if [ -z "$GITOPS_TOKEN" ]; then
          echo "‚ö†Ô∏è  GITOPS_TOKEN not configured. Skipping GitOps repository update."
          echo "To enable GitOps updates, set the GITOPS_TOKEN repository secret."
          exit 0
        fi
        
        # Checkout GitOps repository
        git clone https://$GITOPS_TOKEN@github.com/arkvemuri/deployment-folder.git
        cd deployment-folder
        
        # Update image tag in manifest
        IMAGE_TAG="${{ env.DOCKER_IMAGE }}:${{ github.run_number }}"
        sed -i "s|image:.*|image: ${IMAGE_TAG}|g" aws/order-manifest.yml
        
        # Verify the change
        echo "Updated manifest:"
        cat aws/order-manifest.yml
        
        # Commit and push changes
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add aws/order-manifest.yml
          git commit -m "Update order-service image tag to ${{ github.run_number }}"
          git push
          echo "Successfully updated GitOps repository"
        fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} to staging"
        echo "This would typically involve:"
        echo "- Updating Kubernetes manifests"
        echo "- Rolling out to staging environment"
        echo "- Running smoke tests"

    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-deployment-logs
        path: deployment-logs/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} to production"
        echo "This would typically involve:"
        echo "- Blue-green deployment"
        echo "- Health checks"
        echo "- Rollback capability"

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs for details."