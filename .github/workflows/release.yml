name: Release

on:
  push:
    tags:
      - 'v*'

env:
  JAVA_VERSION: '21'
  DOCKER_IMAGE: 'arkvemuri/order-service'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
        mvn versions:commit

    - name: Build and test
      run: mvn clean verify

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} .
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
        docker push ${{ env.DOCKER_IMAGE }}:latest

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          - `${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}`
          - `${{ env.DOCKER_IMAGE }}:latest`
          
          ## Installation
          ```bash
          docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false

    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/order-${{ steps.version.outputs.version }}.jar
        asset_name: order-${{ steps.version.outputs.version }}.jar
        asset_content_type: application/java-archive

  update-gitops-release:
    name: Update GitOps for Release
    runs-on: ubuntu-latest
    needs: [release]
    
    steps:
    - name: Checkout GitOps repository
      uses: actions/checkout@v4
      with:
        repository: arkvemuri/deployment-folder
        token: ${{ secrets.GITOPS_TOKEN }}
        path: deployment-folder

    - name: Update production manifest
      run: |
        cd deployment-folder
        IMAGE_TAG="${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}"
        
        # Update production manifest
        sed -i "s|image:.*|image: ${IMAGE_TAG}|g" aws/order-manifest-prod.yml
        
        # Create a new release branch
        git checkout -b release-${{ needs.release.outputs.version }}
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add aws/order-manifest-prod.yml
        git commit -m "Release ${{ needs.release.outputs.version }}: Update order-service image"
        git push origin release-${{ needs.release.outputs.version }}

    - name: Create Pull Request for Production Deployment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITOPS_TOKEN }}
        script: |
          const { data: pullRequest } = await github.rest.pulls.create({
            owner: 'arkvemuri',
            repo: 'deployment-folder',
            title: `Release ${{ needs.release.outputs.version }}: Deploy order-service to production`,
            head: 'release-${{ needs.release.outputs.version }}',
            base: 'main',
            body: `## Production Deployment Request
            
            This PR updates the production deployment manifest for order-service release ${{ needs.release.outputs.version }}.
            
            ### Changes:
            - Updated image tag to: \`${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}\`
            
            ### Release Notes:
            See [Release ${{ needs.release.outputs.version }}](https://github.com/arkvemuri/order-service/releases/tag/v${{ needs.release.outputs.version }}) for details.
            
            **Please review and merge to deploy to production.**`
          });
          
          console.log(\`Created PR #\${pullRequest.number}\`);

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, update-gitops-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release ${{ needs.release.outputs.version }} created successfully!"
        echo "Docker image: ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}"
        # Add your notification logic here (Slack, Teams, etc.)

    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Release process failed!"
        # Add failure notification logic here